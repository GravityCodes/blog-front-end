---
  import { parse } from 'cookie';
  const cookies = parse(Astro.request.headers.get('cookie') || '');
  const isLoggedIn = Boolean(cookies.token);
  const {postId} = Astro.props;
  const response = await fetch(`${import.meta.env.PUBLIC_POST_API}/${postId}/comments`);
  const data = await response.json();
  const apiUrl = import.meta.env.PUBLIC_POST_API;

---

<div class="comments-container">
  <div class="add-message-container">
    {
      isLoggedIn ?
      <div class="add-message-wrapper">
        <textarea id="add-message" placeholder="Share your thoughts..." required maxlength=""></textarea>
        <button class="comment-btn" id="submit-btn">Comment</button>
      </div>
      <span></span> :
      <div class="unauthorized-message"><a href="/login">Log in</a> or <a href="/signup">sign up</a> to leave a comment.</div>
    }    
  </div>
  <div class="comments">
    {data.comments.length == 0 && <div><i>Be the first to comment!</i></div>}
    {data.comments.length != 0 && data.comments.map((comment:any)=> {
      return <div class="comment">
                <div class="comment-content">{comment.content}</div>
                <div class="comment-user">{comment.user.name}</div>
              </div>
    })}
  </div>
</div>

<script define:vars={{postId, apiUrl, data}}>
  const submitBtn = document.querySelector("#submit-btn");

  submitBtn?.addEventListener('click', async () => {
    const textarea = document.querySelector("#add-message");
    const errorMsg = document.querySelector("span");
    const data = {content: textarea.value};

    submitBtn?.classList.add("loading");

    if(textarea.validity.valid){
      errorMsg.textContent = "";
      const response = await fetch(`${apiUrl}/${postId}/comments`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        credentials: "include",
        body: JSON.stringify(data)
      });

      if(response.ok) {
        errorMsg.textContent="";
        textarea.value="";
        location.reload();
      }
      else {
        let {errors} = await response.json();

        errorMsg.textContent = errors[0].msg;
      }
    }else {
      errorMsg.textContent = "Comment can't be empty.";
      submitBtn?.classList.remove("loading");
    }
    
  })
</script>


<style> 
 label {
  position: absolute;
  z-index: 2;
  color: var(--accent-color);
 }
 textarea {
  background-color: var(--accent-color-3);
  padding: 10px;
  width: 100%;
  border: none;
  border-radius: 5px;
  color: var(--foreground-color);
  resize: vertical;
 }
 .comments-container {
  padding: 20px;
 }
 .add-message-wrapper {
  display: flex;
  border: 2px solid var(--accent-color-2);
 }
 .comment-btn {
  background-color: var(--background-color);
  color: var(--primary-color);
  border: none;
  border-left: 2px solid var(--accent-color-2);
  cursor: pointer;
 }

 .comments {
  background-color: var(--accent-color-2);
  margin: 20px 10px;
  padding: 10px;
  border-radius: 5px;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

 .comment {
  background-color: var(--background-color);
  padding: 10px;
  border-radius: 5px;
 }

 .comment-user {
  color: var(--primary-color);
 }

 span{
  color: var(--error-color);
 }

 .unauthorized-message {
  text-align: center;
 }

 .loading {
  position: relative;
  color: var(--accent-color-1);
}

</style>